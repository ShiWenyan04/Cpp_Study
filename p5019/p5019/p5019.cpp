#include <iostream>
#include <vector>
/*春春是一名道路工程师，负责铺设一条长度为 n 的道路。
铺设道路的主要工作是填平下陷的地表。整段道路可以看作是 n 块首尾相连的区域，一开始，第 i 块区域下陷的深度为 d i 。
春春每天可以选择一段连续区间 [L,R] ，填充这段区间中的每块区域，让其下陷深度减少 1。在选择区间时，需要保证，区间内的每块区域在填充前下陷深度均不为 0 。
春春希望你能帮他设计一种方案，可以在最短的时间内将整段道路的下陷深度都变为 0 。
输入格式
输入文件包含两行，第一行包含一个整数 n，表示道路的长度。 第二行包含 n 个整数，相邻两数间用一个空格隔开，第 i 个整数为 di​。
输出格式
输出文件仅包含一个整数，即最少需要多少天才能完成任务。*/
using namespace std;
/*思路：假设现在有一个坑，但旁边又有一个坑。
你肯定会选择把两个同时减1；
那么小的坑肯定会被大的坑“带着”填掉。
大的坑也会减少a[i]-a[i-1]的深度，可以说是“免费的”；所以只需要计算每个坑的差值即可
若a[i]>a[i-1],计数器sum+=a[i]-a[i-1]*/
int main() {
	int n;
	cin >> n;
	vector<int> nums;
	for (int i = 0; i < n; i++) {
		int num;
		cin >> num;
		nums.push_back(num);
	}

	int ans= nums[0];//填埋第一个坑所需的的值
	for (int i = 1; i < n; i++) {
		if (nums[i] > nums[i - 1]) {
			ans += (nums[i] - nums[i - 1]);//倘若左边有个小坑
		}
	}
	cout << ans << endl;
}